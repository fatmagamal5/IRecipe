<!DOCTYPE html>
<html>
  <head>
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <title>IRecipes - Manage Recipes</title>
    <%- include("../partials/css-links.ejs") %>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
      :root {
        --accent-color: #ff69b4;  /* Hot pink */
        --nav-hover-color: #2c3e50;  /* Dark blue */
        --surface-color: #f8f9fa;  /* Light blue-grey */
        --heading-color: #2c3e50;  /* Dark blue */
      }
      body {
        background: linear-gradient(120deg, var(--background-color, #fff) 0%, var(--surface-color, #f8f9fa) 100%);
        min-height: 100vh;
      }
      .glass-card {
        background: var(--surface-color);
        box-shadow: 0 8px 32px 0 rgba(44, 62, 80, 0.10);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        border-radius: 18px;
        border: 1px solid rgba(255,255,255,0.18);
        transition: box-shadow 0.3s, transform 0.3s;
      }
      .glass-card:hover {
        box-shadow: 0 16px 40px 0 var(--accent-color);
        transform: translateY(-6px) scale(1.03);
      }
      .table {
        background: var(--surface-color);
        border-radius: 18px;
        overflow: hidden;
      }
      .table thead th {
        background: var(--nav-hover-color);
        color: white;
        border: none;
      }
      .table tbody tr {
        transition: all 0.3s ease;
      }
      .table tbody tr:hover {
        background: rgba(44, 62, 80, 0.05);
      }
      .btn-primary {
        background: var(--accent-color);
        border-color: var(--accent-color);
      }
      .btn-primary:hover {
        background: var(--nav-hover-color);
        border-color: var(--nav-hover-color);
      }
      .btn-outline-primary {
        color: var(--accent-color);
        border-color: var(--accent-color);
      }
      .btn-outline-primary:hover {
        background: var(--accent-color);
        border-color: var(--accent-color);
      }
      .modal-content {
        background: var(--surface-color);
        border-radius: 18px;
      }
      .modal-header {
        background: var(--nav-hover-color);
        color: white;
        border-radius: 18px 18px 0 0;
      }
      .form-control:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 0.2rem rgba(255, 105, 180, 0.25);
      }
      .recipe-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
      }
    </style>
  </head>

  <body>
    <%- include("../partials/nav.ejs", { user: typeof user !== 'undefined' ? user : null }) %>
    <div class="container-fluid">
      <div class="row flex-nowrap">
        <%- include('./partials/sidebar') %>
        
        <!-- Main Content -->
        <div class="col py-3">
          <div class="container">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h2>Manage Recipes</h2>
              <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addRecipeModal">
                <i class="bi bi-plus"></i> Add New Recipe
              </button>
            </div>

            <!-- Recipes Table -->
            <div class="card glass-card">
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>Image</th>
                        <th>Title</th>
                        <th>Category</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% recipes.forEach(recipe => { %>
                        <tr>
                          <td>
                            <img src="<%= recipe.image %>" alt="<%= recipe.title %>" class="recipe-image">
                          </td>
                          <td><%= recipe.title %></td>
                          <td>
                            <% if (recipe.categories && recipe.categories.length > 0) { %>
                              <% recipe.categories.forEach((category, index) => { %>
                                <span class="badge bg-<%= 
                                  category === 'breakfast' ? 'primary' : 
                                  category === 'lunch' ? 'success' :
                                  category === 'dinner' ? 'info' :
                                  category === 'dessert' ? 'warning' :
                                  category === 'vegan' ? 'success' :
                                  category === 'vegetarian' ? 'success' :
                                  'secondary' %>">
                                  <%= category.charAt(0).toUpperCase() + category.slice(1).replace(/-/g, ' ') %>
                                </span>
                                <%= index < recipe.categories.length - 1 ? ' ' : '' %>
                              <% }); %>
                            <% } else { %>
                              <span class="badge bg-secondary">Uncategorized</span>
                            <% } %>
                          </td>
                          <td>
                            <button class="btn btn-sm btn-outline-primary me-2 edit-recipe-btn" 
                              data-recipe-id="<%= recipe._id %>"
                              data-recipe-title="<%= recipe.title %>"
                              data-recipe-description="<%= recipe.description %>"
                              data-recipe-category="<%= recipe.categories[0] %>"
                              data-recipe-image="<%= recipe.image %>">
                              <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-recipe-btn" data-recipe-id="<%= recipe._id %>">
                              <i class="bi bi-trash"></i> Delete
                            </button>
                          </td>
                        </tr>
                      <% }); %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Recipe Modal -->
    <div class="modal fade" id="addRecipeModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add New Recipe</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="addRecipeForm">
              <div class="mb-3">
                <label class="form-label">Title <span class="text-danger">*</span></label>
                <input type="text" class="form-control" name="title" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" name="description" rows="3"></textarea>
              </div>
              <div class="mb-3">
                <label class="form-label">Image URL (Optional)</label>
                <input type="url" class="form-control" name="image" placeholder="https://example.com/image.jpg">
              </div>
              <div class="row">
                <div class="col-md-4 mb-3">
                  <label class="form-label">Prep Time (minutes) <span class="text-danger">*</span></label>
                  <input type="number" class="form-control" name="prepTime" min="0" required>
                </div>
                <div class="col-md-4 mb-3">
                  <label class="form-label">Cook Time (minutes) <span class="text-danger">*</span></label>
                  <input type="number" class="form-control" name="cookTime" min="0" required>
                </div>
                <div class="col-md-4 mb-3">
                  <label class="form-label">Servings <span class="text-danger">*</span></label>
                  <input type="number" class="form-control" name="servings" min="1" required>
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Categories <span class="text-danger">*</span></label>
                <div class="row">
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="breakfast" name="categories">
                      <label class="form-check-label">Breakfast</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="lunch" name="categories">
                      <label class="form-check-label">Lunch</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="dinner" name="categories">
                      <label class="form-check-label">Dinner</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="snack" name="categories">
                      <label class="form-check-label">Snack</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="dessert" name="categories">
                      <label class="form-check-label">Dessert</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="beverage" name="categories">
                      <label class="form-check-label">Beverage</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="soup" name="categories">
                      <label class="form-check-label">Soup</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="salad" name="categories">
                      <label class="form-check-label">Salad</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="appetizer" name="categories">
                      <label class="form-check-label">Appetizer</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="main course" name="categories">
                      <label class="form-check-label">Main Course</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="side dish" name="categories">
                      <label class="form-check-label">Side Dish</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="vegan" name="categories">
                      <label class="form-check-label">Vegan</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="vegetarian" name="categories">
                      <label class="form-check-label">Vegetarian</label>
                    </div>
                  </div>
                  <div class="col-md-3 col-6 mb-2">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="gluten-free" name="categories">
                      <label class="form-check-label">Gluten-Free</label>
                    </div>
                  </div>
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Ingredients <span class="text-danger">*</span></label>
                <div id="ingredientsList">
                  <div class="ingredient-row row mb-2">
                    <div class="col-5">
                      <input type="text" class="form-control ingredient-name" placeholder="Ingredient name" required>
                    </div>
                    <div class="col-4">
                      <input type="text" class="form-control ingredient-quantity" placeholder="Quantity" required>
                    </div>
                    <div class="col-3 d-flex">
                      <input type="text" class="form-control ingredient-notes" placeholder="Notes (optional)">
                      <button type="button" class="btn btn-danger btn-sm ms-2 remove-ingredient-btn" title="Remove ingredient">&times;</button>
                    </div>
                  </div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-primary float-end" id="addIngredientBtn">+ Add Ingredient</button>
              </div>
              <div class="mb-3">
                <label class="form-label">Instructions <span class="text-danger">*</span></label>
                <div id="instructionsList">
                  <div class="instruction-row mb-3 p-3 border rounded">
                    <div class="d-flex align-items-center mb-2">
                      <strong>Step 1</strong>
                      <button type="button" class="btn btn-danger btn-sm ms-auto remove-instruction-btn" title="Remove instruction">&times;</button>
                    </div>
                    <textarea class="form-control instruction-description mb-2" placeholder="Instruction description" required></textarea>
                    <input type="number" class="form-control instruction-timer" placeholder="Timer (minutes, optional)" min="0">
                  </div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-primary float-end" id="addInstructionBtn">+ Add Instruction</button>
              </div>
              <div class="mb-3">
                <label class="form-label">Nutrition Information</label>
                <div class="row g-3">
                  <div class="col-md-3">
                    <label class="form-label">Calories</label>
                    <input type="number" class="form-control" name="nutrition[calories]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Fat (g)</label>
                    <input type="number" class="form-control" name="nutrition[fat]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Protein (g)</label>
                    <input type="number" class="form-control" name="nutrition[protein]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Carbs (g)</label>
                    <input type="number" class="form-control" name="nutrition[carbs]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Fiber (g)</label>
                    <input type="number" class="form-control" name="nutrition[fiber]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Sugar (g)</label>
                    <input type="number" class="form-control" name="nutrition[sugar]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Sodium (mg)</label>
                    <input type="number" class="form-control" name="nutrition[sodium]" min="0">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">Serving Size</label>
                    <input type="text" class="form-control" name="nutrition[servingSize]" placeholder="e.g., 1 cup">
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary w-100">Add Recipe</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Recipe Modal -->
    <div class="modal fade" id="editRecipeModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Recipe</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="editRecipeForm">
              <input type="hidden" name="recipeId" id="editRecipeId">
              <div class="mb-3">
                <label class="form-label">Title</label>
                <input type="text" class="form-control" name="title" id="editRecipeTitle" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Category</label>
                <select class="form-select" name="category" id="editRecipeCategory" required>
                  <option value="">Select a category</option>
                  <option value="breakfast">Breakfast</option>
                  <option value="lunch">Lunch</option>
                  <option value="dinner">Dinner</option>
                  <option value="snack">Snack</option>
                  <option value="dessert">Dessert</option>
                  <option value="beverage">Beverage</option>
                  <option value="soup">Soup</option>
                  <option value="salad">Salad</option>
                  <option value="appetizer">Appetizer</option>
                  <option value="main course">Main Course</option>
                  <option value="side dish">Side Dish</option>
                  <option value="vegan">Vegan</option>
                  <option value="vegetarian">Vegetarian</option>
                  <option value="gluten-free">Gluten-Free</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="editImage" class="form-label">Image URL (Optional)</label>
                <input type="url" class="form-control" id="editImage" name="image" placeholder="https://example.com/image.jpg">
              </div>
              <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" name="description" id="editRecipeDescription" rows="3" required></textarea>
              </div>
              <button type="submit" class="btn btn-primary w-100">Update Recipe</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/footer.ejs") %>
    <%- include("../partials/js-scripts.ejs") %>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const editRecipeForm = document.getElementById('editRecipeForm');
        const editRecipeModal = new bootstrap.Modal(document.getElementById('editRecipeModal'));

        // Handle edit recipe buttons
        document.querySelectorAll('.edit-recipe-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const recipeId = this.getAttribute('data-recipe-id');
            const recipeTitle = this.getAttribute('data-recipe-title');
            const recipeDescription = this.getAttribute('data-recipe-description');
            const recipeCategory = this.getAttribute('data-recipe-category');
            const recipeImage = this.getAttribute('data-recipe-image');

            // Set form values
            document.getElementById('editRecipeId').value = recipeId;
            document.getElementById('editRecipeTitle').value = recipeTitle;
            document.getElementById('editRecipeDescription').value = recipeDescription;
            document.getElementById('editRecipeCategory').value = recipeCategory;
            document.getElementById('editImage').value = recipeImage;

            // Show modal
            editRecipeModal.show();
          });
        });

        // Handle edit recipe form submission
        editRecipeForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const recipeId = document.getElementById('editRecipeId').value;
          const formData = new FormData(this);
          const recipeData = {
            title: formData.get('title'),
            description: formData.get('description'),
            categories: [formData.get('category')],
            image: formData.get('image')
          };

          try {
            const response = await fetch(`/api/recipe/${recipeId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(recipeData)
            });

            const data = await response.json();

            if (response.ok) {
              // Close the modal
              editRecipeModal.hide();
              
              // Show success message
              showToast('Recipe updated successfully!', 'success');
              
              // Reload the page to show the updated recipe
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              showToast(data.error || 'Failed to update recipe', 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showToast('Something went wrong', 'error');
          }
        });

        // Handle delete recipe buttons
        document.querySelectorAll('.delete-recipe-btn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const recipeId = this.getAttribute('data-recipe-id');
            
            if (confirm('Are you sure you want to delete this recipe?')) {
              try {
                const response = await fetch(`/api/recipe/${recipeId}`, {
                  method: 'DELETE',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                const data = await response.json();

                if (response.ok) {
                  showToast('Recipe deleted successfully!', 'success');
                  // Remove the row from the table
                  this.closest('tr').remove();
                } else {
                  showToast(data.error || 'Failed to delete recipe', 'error');
                }
              } catch (error) {
                console.error('Error:', error);
                showToast('Something went wrong', 'error');
              }
            }
          });
        });
      });

      // Toast notification function
      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0 position-fixed bottom-0 end-0 m-3`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">
              ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
        `;
        
        document.body.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        toast.addEventListener('hidden.bs.toast', () => {
          toast.remove();
        });
      }

      // Add Ingredient functionality
      document.getElementById('addIngredientBtn').addEventListener('click', () => {
        const newRow = document.createElement('div');
        newRow.classList.add('ingredient-row', 'row', 'mb-2');
        newRow.innerHTML = `
          <div class="col-5">
            <input type="text" class="form-control ingredient-name" placeholder="Ingredient name" required>
          </div>
          <div class="col-4">
            <input type="text" class="form-control ingredient-quantity" placeholder="Quantity" required>
          </div>
          <div class="col-3 d-flex">
            <input type="text" class="form-control ingredient-notes" placeholder="Notes (optional)">
            <button type="button" class="btn btn-danger btn-sm ms-2 remove-ingredient-btn" title="Remove ingredient">&times;</button>
          </div>`;
        document.getElementById('ingredientsList').appendChild(newRow);
      });

      // Remove Ingredient functionality
      document.getElementById('ingredientsList').addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-ingredient-btn')) {
          e.target.closest('.ingredient-row').remove();
        }
      });

      // Add Instruction functionality
      document.getElementById('addInstructionBtn').addEventListener('click', () => {
        const count = document.querySelectorAll('.instruction-row').length + 1;
        const newDiv = document.createElement('div');
        newDiv.classList.add('instruction-row', 'mb-3', 'p-3', 'border', 'rounded');
        newDiv.innerHTML = `
          <div class="d-flex align-items-center mb-2">
            <strong>Step ${count}</strong>
            <button type="button" class="btn btn-danger btn-sm ms-auto remove-instruction-btn" title="Remove instruction">&times;</button>
          </div>
          <textarea class="form-control instruction-description mb-2" placeholder="Instruction description" required></textarea>
          <input type="number" class="form-control instruction-timer" placeholder="Timer (minutes, optional)" min="0">
        `;
        document.getElementById('instructionsList').appendChild(newDiv);
      });

      // Remove Instruction functionality
      document.getElementById('instructionsList').addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-instruction-btn')) {
          e.target.closest('.instruction-row').remove();
          updateInstructionSteps();
        }
      });

      // Update step numbering
      function updateInstructionSteps() {
        const steps = document.querySelectorAll('.instruction-row');
        steps.forEach((stepDiv, idx) => {
          const strongTag = stepDiv.querySelector('strong');
          if (strongTag) strongTag.textContent = `Step ${idx + 1}`;
        });
      }

      // Handle form submission
      document.getElementById('addRecipeForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        // Create FormData object
        const formData = new FormData();

        // Add basic fields
        formData.append('title', this.querySelector('[name="title"]').value);
        formData.append('description', this.querySelector('[name="description"]').value);
        formData.append('prepTime', this.querySelector('[name="prepTime"]').value);
        formData.append('cookTime', this.querySelector('[name="cookTime"]').value);
        formData.append('servings', this.querySelector('[name="servings"]').value);

        // Add image if provided
        const imageUrl = this.querySelector('[name="image"]').value;
        if (imageUrl) {
          formData.append('image', imageUrl);
        }

        // Add categories
        const categories = Array.from(this.querySelectorAll('input[name="categories"]:checked')).map(cb => cb.value);
        formData.append('categories', JSON.stringify(categories));

        // Add ingredients
        const ingredients = [];
        document.querySelectorAll('.ingredient-row').forEach(row => {
          ingredients.push({
            name: row.querySelector('.ingredient-name').value,
            quantity: row.querySelector('.ingredient-quantity').value,
            notes: row.querySelector('.ingredient-notes').value
          });
        });
        formData.append('ingredients', JSON.stringify(ingredients));

        // Add instructions
        const instructions = [];
        document.querySelectorAll('.instruction-row').forEach((row, index) => {
          instructions.push({
            step: index + 1,
            description: row.querySelector('.instruction-description').value,
            timer: row.querySelector('.instruction-timer').value || null
          });
        });
        formData.append('instructions', JSON.stringify(instructions));

        // Add nutrition information
        const nutrition = {
          calories: this.querySelector('[name="nutrition[calories]"]').value || 0,
          fat: this.querySelector('[name="nutrition[fat]"]').value || 0,
          protein: this.querySelector('[name="nutrition[protein]"]').value || 0,
          carbs: this.querySelector('[name="nutrition[carbs]"]').value || 0,
          fiber: this.querySelector('[name="nutrition[fiber]"]').value || 0,
          sugar: this.querySelector('[name="nutrition[sugar]"]').value || 0,
          sodium: this.querySelector('[name="nutrition[sodium]"]').value || 0,
          servingSize: this.querySelector('[name="nutrition[servingSize]"]').value || ''
        };
        formData.append('nutrition', JSON.stringify(nutrition));

        try {
          const response = await fetch('/api/recipe', {
            method: 'POST',
            body: formData
          });

          const data = await response.json();

          if (response.ok) {
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addRecipeModal'));
            modal.hide();
            
            // Show success message
            showToast('Recipe added successfully!', 'success');
            
            // Reload page
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showToast(data.error || 'Failed to add recipe', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast('Something went wrong', 'error');
        }
      });
    </script>
  </body>
</html>
