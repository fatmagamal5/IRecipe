<!DOCTYPE html>
<html>
  <head>
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <title>IRecipes - Manage Users</title>
    <%- include("../partials/css-links.ejs") %>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
      :root {
        --accent-color: #ff69b4;  /* Hot pink */
        --nav-hover-color: #2c3e50;  /* Dark blue */
        --surface-color: #f8f9fa;  /* Light blue-grey */
        --heading-color: #2c3e50;  /* Dark blue */
      }
      body {
        background: linear-gradient(120deg, var(--background-color, #fff) 0%, var(--surface-color, #f8f9fa) 100%);
        min-height: 100vh;
      }
      .glass-card {
        background: var(--surface-color);
        box-shadow: 0 8px 32px 0 rgba(44, 62, 80, 0.10);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        border-radius: 18px;
        border: 1px solid rgba(255,255,255,0.18);
        transition: box-shadow 0.3s, transform 0.3s;
      }
      .glass-card:hover {
        box-shadow: 0 16px 40px 0 var(--accent-color);
        transform: translateY(-6px) scale(1.03);
      }
      .table {
        background: var(--surface-color);
        border-radius: 18px;
        overflow: hidden;
      }
      .table thead th {
        background: var(--nav-hover-color);
        color: white;
        border: none;
      }
      .table tbody tr {
        transition: all 0.3s ease;
      }
      .table tbody tr:hover {
        background: rgba(44, 62, 80, 0.05);
      }
      .btn-primary {
        background: var(--accent-color);
        border-color: var(--accent-color);
      }
      .btn-primary:hover {
        background: var(--nav-hover-color);
        border-color: var(--nav-hover-color);
      }
      .btn-outline-primary {
        color: var(--accent-color);
        border-color: var(--accent-color);
      }
      .btn-outline-primary:hover {
        background: var(--accent-color);
        border-color: var(--accent-color);
      }
      .modal-content {
        background: var(--surface-color);
        border-radius: 18px;
      }
      .modal-header {
        background: var(--nav-hover-color);
        color: white;
        border-radius: 18px 18px 0 0;
      }
      .form-control:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 0.2rem rgba(255, 105, 180, 0.25);
      }
    </style>
  </head>

  <body>
    <%- include("../partials/nav.ejs", { user: typeof user !== 'undefined' ? user : null }) %>
    <div class="container-fluid">
      <div class="row flex-nowrap">
        <%- include('./partials/sidebar') %>
        
        <!-- Main Content -->
        <div class="col py-3">
          <div class="container">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h2>Manage Users</h2>
              <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                <i class="bi bi-plus"></i> Add New User
              </button>
            </div>

            <!-- Search and Filter -->
            <div class="card mb-4">
              <div class="card-body">
                <div class="row g-3">
                  <div class="col-md-6">
                    <input
                      type="text"
                      class="form-control"
                      placeholder="Search users..."
                    />
                  </div>
                  <div class="col-md-3">
                    <select class="form-select">
                      <option selected>All Roles</option>
                      <option>Admin</option>
                      <option>User</option>
                    </select>
                  </div>
                  <div class="col-md-3">
                    <button class="btn btn-outline-primary w-100" onclick="clearFilters()">
                      <i class="bi bi-x-circle"></i> Clear Filters
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Users Table -->
            <div class="card glass-card">
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table">
                    <thead>
                      <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% users.forEach(user => { %>
                        <tr data-created-at="<%= user.createdAt %>">
                          <td><%= user.name %></td>
                          <td><%= user.email %></td>
                          <td><span class="badge bg-<%= user.role === 'admin' ? 'primary' : 'secondary' %>"><%= user.role %></span></td>
                          <td>
                            <button class="btn btn-sm btn-outline-primary me-2 edit-user-btn" data-user-id="<%= user._id %>" data-user-name="<%= user.name %>" data-user-email="<%= user.email %>" data-user-role="<%= user.role %>">
                              <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button 
                              class="btn btn-sm btn-danger delete-user-btn" 
                              onclick="deleteUser('<%= user._id %>')"
                              data-user-id="<%= user._id %>"
                            >
                              <i class="bi bi-trash"></i>
                            </button>
                          </td>
                        </tr>
                      <% }); %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add New User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="addUserForm">
              <div class="mb-3">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" name="name" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" name="email" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" class="form-control" name="password" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Role</label>
                <select class="form-select" name="role">
                  <option value="user">User</option>
                  <option value="admin">Admin</option>
                </select>
              </div>
              <button type="submit" class="btn btn-primary w-100">Add User</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <form id="editUserForm">
              <input type="hidden" name="userId" id="editUserId">
              <div class="mb-3">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" name="name" id="editUserName" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" name="email" id="editUserEmail" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Role</label>
                <select class="form-select" name="role" id="editUserRole">
                  <option value="user">User</option>
                  <option value="admin">Admin</option>
                </select>
              </div>
              <button type="submit" class="btn btn-primary w-100">Update User</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header bg-danger text-white">
            <h5 class="modal-title">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Confirm Deletion
            </h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p class="mb-0">Are you sure you want to delete this user? This action cannot be undone and will remove all their recipes and reviews.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              <i class="bi bi-x-circle me-2"></i>Cancel
            </button>
            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
              <i class="bi bi-trash me-2"></i>Yes, Delete User
            </button>
          </div>
        </div>
      </div>
    </div>

    <%- include("../partials/footer.ejs") %>
    <%- include("../partials/js-scripts.ejs") %>
    <script>
      // Make clearFilters function globally accessible
      function clearFilters() {
        const searchInput = document.querySelector('input[placeholder="Search users..."]');
        const roleFilter = document.querySelector('select:first-of-type');
        const tableBody = document.querySelector('table tbody');
        const rows = Array.from(tableBody.getElementsByTagName('tr'));

        // Clear search and role filter
        searchInput.value = '';
        roleFilter.value = 'All Roles';

        // Show all rows
        rows.forEach(row => row.style.display = '');

        // Reset to original order (newest first)
        rows.sort((a, b) => {
          const dateA = new Date(a.dataset.createdAt);
          const dateB = new Date(b.dataset.createdAt);
          return dateB - dateA;
        });

        // Reorder rows in the table
        rows.forEach(row => tableBody.appendChild(row));
      }

      document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.querySelector('input[placeholder="Search users..."]');
        const roleFilter = document.querySelector('select:first-of-type');
        const tableBody = document.querySelector('table tbody');
        const rows = Array.from(tableBody.getElementsByTagName('tr'));
        const addUserForm = document.getElementById('addUserForm');
        const editUserForm = document.getElementById('editUserForm');
        const editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));

        // Handle delete user buttons
        document.querySelectorAll('.delete-user-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');
            deleteUser(userId);
          });
        });

        // Handle Add User form submission
        addUserForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const formData = new FormData(this);
          const userData = {
            name: formData.get('name'),
            email: formData.get('email'),
            password: formData.get('password'),
            role: formData.get('role')
          };

          try {
            const response = await fetch('/api/user/signup', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(userData)
            });

            const data = await response.json();

            if (response.ok) {
              // Close the modal
              const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
              modal.hide();
              
              // Show success message
              showToast('User added successfully!', 'success');
              
              // Reload the page to show the new user
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              showToast(data.error || 'Failed to add user', 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showToast('Something went wrong', 'error');
          }
        });

        // Handle edit user buttons
        document.querySelectorAll('.edit-user-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');
            const userName = this.getAttribute('data-user-name');
            const userEmail = this.getAttribute('data-user-email');
            const userRole = this.getAttribute('data-user-role');

            // Set form values
            document.getElementById('editUserId').value = userId;
            document.getElementById('editUserName').value = userName;
            document.getElementById('editUserEmail').value = userEmail;
            document.getElementById('editUserRole').value = userRole;

            // Show modal
            editUserModal.show();
          });
        });

        // Edit User Form Submit Handler
        document.getElementById('editUserForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const userId = document.getElementById('editUserId').value;
          const formData = {
            name: document.getElementById('editUserName').value,
            email: document.getElementById('editUserEmail').value,
            role: document.getElementById('editUserRole').value
          };

          try {
            const response = await fetch(`/api/user/${userId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            });

            if (!response.ok) {
              throw new Error('Failed to update user');
            }

            const data = await response.json();
            
            // Show success message
            showToast('User updated successfully', 'success');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
            modal.hide();
            
            // Reload page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } catch (error) {
            console.error('Error:', error);
            showToast('Failed to update user', 'error');
          }
        });

        function filterUsers() {
          const searchTerm = searchInput.value.toLowerCase();
          const selectedRole = roleFilter.value.toLowerCase();

          // Filter rows
          rows.forEach(row => {
            const name = row.cells[0].textContent.toLowerCase();
            const email = row.cells[1].textContent.toLowerCase();
            const role = row.cells[2].textContent.toLowerCase();

            const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
            const matchesRole = selectedRole === 'all roles' || role === selectedRole;

            row.style.display = matchesSearch && matchesRole ? '' : 'none';
          });

          // Sort rows by newest first
          const visibleRows = rows.filter(row => row.style.display !== 'none');
          visibleRows.sort((a, b) => {
            const dateA = new Date(a.dataset.createdAt);
            const dateB = new Date(b.dataset.createdAt);
            return dateB - dateA;
          });

          // Reorder rows in the table
          visibleRows.forEach(row => tableBody.appendChild(row));
        }

        // Add event listeners
        searchInput.addEventListener('input', filterUsers);
        roleFilter.addEventListener('change', filterUsers);
      });

      // Toast notification function
      function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0 position-fixed bottom-0 end-0 m-3`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">
              ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
        `;
        
        document.body.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        toast.addEventListener('hidden.bs.toast', () => {
          toast.remove();
        });
      }

      let userToDelete = null;
      const deleteConfirmModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));

      function deleteUser(userId) {
        userToDelete = userId;
        deleteConfirmModal.show();
      }

      document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
        if (!userToDelete) return;

        try {
          const response = await fetch(`/api/users/${userToDelete}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            deleteConfirmModal.hide();
            showToast('User deleted successfully', 'success');
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            const data = await response.json();
            showToast(data.error || 'Failed to delete user', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showToast('An error occurred while deleting the user', 'error');
        }
      });
    </script>
  </body>
</html>
