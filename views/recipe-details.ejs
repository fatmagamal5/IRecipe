<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= recipe?.title || 'Recipe Details' %> - IRecipes</title>
    <%- include("./partials/css-links.ejs") %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <style>
      :root {
        --accent-color: #ff69b4;  /* Hot pink */
        --nav-hover-color: #2c3e50;  /* Dark blue */
        --surface-color: #f8f9fa;  /* Light blue-grey */
        --heading-color: #2c3e50;  /* Dark blue */
      }

      body {
        background: linear-gradient(120deg, var(--background-color, #fff) 0%, var(--surface-color, #f8f9fa) 100%);
        min-height: 100vh;
      }

      .recipe-header {
        background: linear-gradient(135deg, var(--nav-hover-color) 0%, var(--accent-color) 100%);
        color: white;
        padding: 4rem 0;
        margin-bottom: 3rem;
      }

      .recipe-image {
        width: 100%;
        height: 400px;
        object-fit: cover;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(44, 62, 80, 0.15);
      }

      .time-badge {
        background: rgba(255, 255, 255, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 50px;
        margin-right: 1rem;
        margin-bottom: 1rem;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }

      .time-badge i {
        color: var(--accent-color);
      }

      .recipe-content {
        background: var(--surface-color);
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(44, 62, 80, 0.1);
        margin-bottom: 3rem;
      }

      .ingredients-section,
      .instructions-section {
        margin-bottom: 2rem;
      }

      .ingredients-section h3,
      .instructions-section h3 {
        color: var(--heading-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .ingredients-section h3 i,
      .instructions-section h3 i {
        color: var(--accent-color);
      }

      .ingredients-list {
        list-style: none;
        padding: 0;
      }

      .ingredients-list li {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(44, 62, 80, 0.1);
      }

      .ingredients-list li:last-child {
        border-bottom: none;
      }

      .ingredients-list li i {
        color: var(--accent-color);
      }

      .instructions-list {
        list-style: none;
        padding: 0;
        counter-reset: step-counter;
      }

      .instructions-list li {
        position: relative;
        padding: 1rem 0 1rem 3rem;
        border-bottom: 1px solid rgba(44, 62, 80, 0.1);
      }

      .instructions-list li:last-child {
        border-bottom: none;
      }

      .instructions-list li::before {
        counter-increment: step-counter;
        content: counter(step-counter);
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 2rem;
        height: 2rem;
        background: var(--accent-color);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
      }

      .instruction-content {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(44, 62, 80, 0.05);
        margin-bottom: 1rem;
        border: 1px solid rgba(44, 62, 80, 0.1);
        transition: all 0.3s ease;
      }

      .instruction-content:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(44, 62, 80, 0.1);
        border-color: var(--accent-color);
      }

      .instruction-content img {
        max-height: 300px;
        width: 100%;
        object-fit: cover;
        border-radius: 8px;
        margin-top: 1rem;
      }

      .instruction-content .time-badge {
        margin-top: 0.5rem;
        margin-bottom: 0;
      }

      .favorite-btn {
        background: transparent;
        border: 2px solid var(--accent-color);
        color: var(--accent-color);
        padding: 0.5rem 1.5rem;
        border-radius: 50px;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }

      .favorite-btn:hover {
        background: var(--accent-color);
        color: white;
      }

      .favorite-btn i {
        font-size: 1.2rem;
      }

      .recipe-meta {
        background: var(--surface-color);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 16px rgba(44, 62, 80, 0.1);
      }

      .recipe-meta h4 {
        color: var(--heading-color);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .recipe-meta h4 i {
        color: var(--accent-color);
      }

      .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
        color: var(--nav-hover-color);
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
      }

      .meta-item:hover {
        background: rgba(44, 62, 80, 0.05);
      }

      .meta-item i {
        color: var(--accent-color);
        font-size: 1.1rem;
      }

      /* Remove author section styles */
      .author-section {
        display: none;
      }

      .author-avatar {
        display: none;
      }

      .author-info {
        display: none;
      }

      .back-to-recipes {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--accent-color);
        text-decoration: none;
        margin-bottom: 2rem;
        transition: all 0.3s ease;
      }

      .back-to-recipes:hover {
        color: var(--nav-hover-color);
        transform: translateX(-5px);
      }

      .back-to-recipes i {
        font-size: 1.2rem;
      }

      .category-badge {
        background: var(--surface-color);
        color: var(--nav-hover-color);
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        border: 1px solid rgba(44, 62, 80, 0.1);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }

      .category-badge:hover {
        background: var(--accent-color);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(44, 62, 80, 0.1);
      }

      @media (max-width: 768px) {
        .recipe-header {
          padding: 2rem 0;
        }

        .recipe-image {
          height: 300px;
          margin-top: 2rem;
        }

        .time-badge {
          margin-bottom: 0.5rem;
        }

        .meta-item {
          margin-bottom: 1rem;
        }
      }

      .rating-input .stars {
        font-size: 1.5rem;
        cursor: pointer;
      }
      .rating-input .stars i {
        color: #ddd;
        transition: color 0.2s;
      }
      .rating-input .stars i.active {
        color: #ffc107;
      }
      .reviews-list .review-item {
        border-bottom: 1px solid #eee;
        padding: 1rem 0;
      }
      .reviews-list .review-item:last-child {
        border-bottom: none;
      }
    </style>
  </head>
  <body>
    <%- include("./partials/nav.ejs", { user: typeof user !== 'undefined' ? user : null }) %>

    <!-- Recipe Header -->
    <section class="recipe-header">
      <div class="container">
        <a href="/recipes" class="back-to-recipes">
          <i class="bi bi-arrow-left"></i> Back to Recipes
        </a>

        <div class="row align-items-center">
          <div class="col-lg-6">
            <h1 class="display-4 fw-bold mb-4">
              <%= recipe?.title || 'Untitled Recipe' %>
            </h1>
            <p class="lead mb-4">
              <%= recipe?.description || 'No description available' %>
            </p>

            <div class="d-flex flex-wrap">
              <div class="time-badge">
                <i class="bi bi-clock"></i>
                <span>Prep: <%= recipe?.prepTime || 'N/A' %> min</span>
              </div>
              <div class="time-badge">
                <i class="bi bi-fire"></i>
                <span>Cook: <%= recipe?.cookTime || 'N/A' %> min</span>
              </div>
              <div class="time-badge">
                <i class="bi bi-hourglass-split"></i>
                <span>Total: <%= recipe?.totalTime || 'N/A' %> min</span>
              </div>
              <div class="time-badge">
                <i class="bi bi-people"></i>
                <span>Serves: <%= recipe?.servings || 'N/A' %></span>
              </div>
            </div>
            <% if (user) { %>
              <% var isFavorite = user && user.favorites && user.favorites.includes(recipe._id); %>
              <div class="mt-3">
                <button 
                  class="btn favorite-btn" 
                  data-recipe-id="<%= recipe._id %>"
                  data-is-favorite="<%= isFavorite %>"
                >
                  <i class="bi bi-heart<%= isFavorite ? '-fill' : '' %>"></i>
                  <%= isFavorite ? 'Remove from Favorites' : 'Add to Favorites' %>
                </button>
              </div>
            <% } %>
          </div>
          <div class="col-lg-6">
            <img
              src="<%= recipe.images || '/img/placeholder.jpg' %>"
              alt="<%= recipe.title || 'Recipe Image' %>"
              class="recipe-image"
            />
          </div>
        </div>
      </div>
    </section>

    <!-- Recipe Content -->
    <div class="container">
      <div class="recipe-content">
        <!-- Ingredients Section -->
        <div class="ingredients-section">
          <h3><i class="bi bi-list-check"></i> Ingredients</h3>
          <ul class="ingredients-list">
            <% if (recipe && recipe.ingredients && recipe.ingredients.length > 0) { %>
              <% recipe.ingredients.forEach(function(ingredient) { %>
                <li>
                  <i class="bi bi-check-circle"></i>
                  <span>
                    <%= ingredient.quantity %> <%= ingredient.name %>
                    <% if (ingredient.notes) { %>
                      <small class="text-muted">(<%= ingredient.notes %>)</small>
                    <% } %>
                  </span>
                </li>
              <% }); %>
            <% } else { %>
              <li>
                <i class="bi bi-x-circle"></i>
                <span>No ingredients listed</span>
              </li>
            <% } %>
          </ul>
        </div>

        <!-- Instructions Section -->
        <div class="instructions-section">
          <h3><i class="bi bi-list-ol"></i> Instructions</h3>
          <ol class="instructions-list">
            <% if (recipe && recipe.instructions && recipe.instructions.length > 0) { %>
              <% recipe.instructions.forEach((instruction, index) => { %>
                <li>
                  <div class="instruction-content">
                    <p class="mb-2"><%= instruction.description %></p>
                    <% if (instruction.timer) { %>
                      <div class="time-badge">
                        <i class="bi bi-stopwatch"></i>
                        <%= instruction.timer %> min
                      </div>
                    <% } %>
                    <% if (instruction.image) { %>
                      <img src="<%= instruction.image %>" alt="Step <%= index + 1 %>" class="img-fluid rounded mt-3">
                    <% } %>
                  </div>
                </li>
              <% }); %>
            <% } else { %>
              <li>No instructions available</li>
            <% } %>
          </ol>
        </div>

        <!-- Categories -->
        <div class="recipe-meta">
          <h4><i class="bi bi-tags"></i> Categories</h4>
          <div class="d-flex flex-wrap gap-2">
            <% if (recipe?.categories && recipe.categories.length > 0) { %>
              <% recipe.categories.forEach((category) => { %>
                <span class="category-badge"><%= category %></span>
              <% }); %>
            <% } else { %>
              <span class="category-badge">Uncategorized</span>
            <% } %>
          </div>
        </div>

        <!-- Nutrition Information -->
        <div class="recipe-meta">
          <h4><i class="bi bi-pie-chart"></i> Nutrition Information</h4>
          <div class="row">
            <div class="col-md-3 col-6">
              <div class="meta-item">
                <i class="bi bi-fire"></i>
                <span>Calories: <%= recipe?.nutrition?.calories || 'N/A' %> kcal</span>
              </div>
            </div>
            <div class="col-md-3 col-6">
              <div class="meta-item">
                <i class="bi bi-droplet"></i>
                <span>Protein: <%= recipe?.nutrition?.protein || 'N/A' %>g</span>
              </div>
            </div>
            <div class="col-md-3 col-6">
              <div class="meta-item">
                <i class="bi bi-basket"></i>
                <span>Carbs: <%= recipe?.nutrition?.carbs || 'N/A' %>g</span>
              </div>
            </div>
            <div class="col-md-3 col-6">
              <div class="meta-item">
                <i class="bi bi-droplet-fill"></i>
                <span>Fat: <%= recipe?.nutrition?.fat || 'N/A' %>g</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Additional Information -->
        <div class="recipe-meta">
          <h4><i class="bi bi-info-circle"></i> Additional Information</h4>
          <div class="meta-item">
            <i class="bi bi-calendar"></i>
            <span>Added: <%= recipe?.createdAt ? new Date(recipe.createdAt).toLocaleDateString() : 'Unknown' %></span>
          </div>
          <% if (recipe?.difficulty) { %>
            <div class="meta-item">
              <i class="bi bi-speedometer2"></i>
              <span>Difficulty: <%= recipe.difficulty %></span>
            </div>
          <% } %>
        </div>

        <!-- Reviews Section -->
        <div class="reviews-section mt-5">
          <h3><i class="bi bi-chat-square-text"></i> Reviews</h3>
          
          <!-- Review Form -->
          <div class="review-form mb-4">
            <form id="reviewForm" class="needs-validation" novalidate>
              <div class="mb-3">
                <label for="rating" class="form-label">Rating</label>
                <div class="rating-input">
                  <div class="stars">
                    <i class="bi bi-star" data-rating="1"></i>
                    <i class="bi bi-star" data-rating="2"></i>
                    <i class="bi bi-star" data-rating="3"></i>
                    <i class="bi bi-star" data-rating="4"></i>
                    <i class="bi bi-star" data-rating="5"></i>
                  </div>
                  <input type="hidden" id="rating" name="rating" required>
                </div>
              </div>
              <div class="mb-3">
                <label for="comment" class="form-label">Your Review</label>
                <textarea class="form-control" id="comment" name="comment" rows="3" required></textarea>
                <div class="invalid-feedback">
                  Please provide your review.
                </div>
              </div>
              <button type="submit" class="btn btn-primary">Submit Review</button>
            </form>
          </div>

          <!-- Reviews List -->
          <div id="reviewsList" class="reviews-list">
            <!-- Reviews will be loaded here -->
          </div>
        </div>
      </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div id="reviewToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
          <i class="bi bi-check-circle me-2"></i>
          <strong class="me-auto">Review Submitted</strong>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          Thank you for your review! It will be visible after approval by our team.
        </div>
      </div>
    </div>

    <%- include("./partials/footer.ejs") %>
    <%- include("./partials/js-scripts.ejs") %>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const favoriteBtn = document.querySelector('.favorite-btn');
        if (favoriteBtn) {
          favoriteBtn.addEventListener('click', async function() {
            const recipeId = this.dataset.recipeId;
            const isFavorite = this.dataset.isFavorite === 'true';
            const method = isFavorite ? 'DELETE' : 'POST';
            
            try {
              const response = await fetch(`/api/user/favorites/${recipeId}`, {
                method: method,
                credentials: 'include'
              });
              
              if (response.ok) {
                const icon = this.querySelector('i');
                const text = this.querySelector('span') || document.createElement('span');
                
                if (isFavorite) {
                  icon.classList.remove('bi-heart-fill');
                  icon.classList.add('bi-heart');
                  text.textContent = 'Add to Favorites';
                  this.dataset.isFavorite = 'false';
                } else {
                  icon.classList.remove('bi-heart');
                  icon.classList.add('bi-heart-fill');
                  text.textContent = 'Remove from Favorites';
                  this.dataset.isFavorite = 'true';
                }
                
                // Show success message
                showToast(isFavorite ? 'Removed from favorites' : 'Added to favorites', 'success');
              } else {
                showToast('Failed to update favorites', 'error');
              }
            } catch (error) {
              console.error('Error:', error);
              showToast('An error occurred', 'error');
            }
          });
        }
      });

      function showToast(message, type = 'info') {
        const colors = {
          success: '#28a745',
          error: '#dc3545',
          info: '#17a2b8'
        };
        
        Toastify({
          text: message,
          duration: 3000,
          gravity: "top",
          position: "right",
          backgroundColor: colors[type],
          stopOnFocus: true
        }).showToast();
      }

      // Handle star rating
      const stars = document.querySelectorAll('.rating-input .stars i');
      const ratingInput = document.getElementById('rating');
      
      stars.forEach(star => {
        star.addEventListener('mouseover', function() {
          const rating = this.dataset.rating;
          updateStars(rating);
        });
        
        star.addEventListener('click', function() {
          const rating = this.dataset.rating;
          ratingInput.value = rating;
          updateStars(rating);
        });
      });

      document.querySelector('.rating-input').addEventListener('mouseleave', function() {
        updateStars(ratingInput.value || 0);
      });

      function updateStars(rating) {
        stars.forEach(star => {
          star.classList.toggle('active', star.dataset.rating <= rating);
          star.classList.toggle('bi-star-fill', star.dataset.rating <= rating);
          star.classList.toggle('bi-star', star.dataset.rating > rating);
        });
      }

      // Handle review form submission
      const reviewForm = document.getElementById('reviewForm');
      const reviewToast = new bootstrap.Toast(document.getElementById('reviewToast'));

      reviewForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!this.checkValidity()) {
          e.stopPropagation();
          this.classList.add('was-validated');
          return;
        }

        const formData = {
          rating: parseInt(ratingInput.value),
          comment: document.getElementById('comment').value
        };

        try {
          const response = await fetch(`/recipes/<%= recipe._id %>/reviews`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify(formData)
          });

          if (response.ok) {
            // Clear form
            reviewForm.reset();
            ratingInput.value = '';
            updateStars(0);
            reviewForm.classList.remove('was-validated');
            
            // Reload reviews
            loadReviews();
            
            // Show success toast
            reviewToast.show();
          } else {
            const data = await response.json();
            alert(data.error || 'Failed to submit review');
          }
        } catch (error) {
          console.error('Error submitting review:', error);
          alert('Failed to submit review');
        }
      });

      // Load reviews
      async function loadReviews() {
        try {
          const response = await fetch(`/recipes/<%= recipe._id %>/reviews`);
          const reviews = await response.json();
          
          const reviewsList = document.getElementById('reviewsList');
          if (reviews.length === 0) {
            reviewsList.innerHTML = '<p class="text-muted">No reviews yet. Be the first to review!</p>';
            return;
          }

          reviewsList.innerHTML = reviews.map(review => `
            <div class="review-item">
              <div class="d-flex align-items-center mb-2">
                <img src="${review.user.profilePicture || '/img/default-profilePicture.png'}" 
                     alt="${review.user.name}" 
                     class="rounded-circle me-2" 
                     style="width: 40px; height: 40px;">
                <div>
                  <h5 class="mb-0">${review.user.name}</h5>
                  <div class="stars">
                    ${Array(review.rating).fill('<i class="bi bi-star-fill text-warning"></i>').join('')}
                    ${Array(5 - review.rating).fill('<i class="bi bi-star text-warning"></i>').join('')}
                  </div>
                </div>
              </div>
              <p class="mb-0">${review.comment}</p>
              <small class="text-muted">${new Date(review.createdAt).toLocaleDateString()}</small>
            </div>
          `).join('');
        } catch (error) {
          console.error('Error loading reviews:', error);
          document.getElementById('reviewsList').innerHTML = 
            '<p class="text-danger">Failed to load reviews</p>';
        }
      }

      // Load reviews when page loads
      document.addEventListener('DOMContentLoaded', loadReviews);
    </script>
  </body>
</html>
